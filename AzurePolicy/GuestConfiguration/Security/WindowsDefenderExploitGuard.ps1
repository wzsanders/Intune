#region GUIDs
# 0 = Disable, 1 = Block, 2 = Audit, 6 = Warn
# Warn is available for most ASR rules.
$asrRules = @(
    [PSCustomObject]@{
        Id     = "56a863a9-875e-4185-98a7-b882c64b5ce5"
        Name   = "Block abuse of exploited vulnerable signed drivers"
        Action = 1
    }
)

# Setting below attack surface reduction settings to enabled
$asrRules = @(
    [PSCustomObject]@{
        Id     = "be9ba2d9-53ea-4cdc-84e5-9b1eeee46550"
        Name   = "Block executable content from email client and webmail"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "b2b3f03d-6a65-4f7b-a9c7-1c7ef74a9ba4"
        Name   = "Block untrusted and unsigned processes that run from USB"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2"
        Name   = "Block credential stealing from the Windows local security authority subsystem (lsass.exe)"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "d4f940ab-401b-4efc-aadc-ad5f3c50688a"
        Name   = "Block all Office applications from creating child processes"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "d3e037e1-3eb8-44c8-a917-57927947596d"
        Name   = "Block JavaScript or VBScript from launching downloaded executable content"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "5beb7efe-fd9a-4556-801d-275e5ffc04cc"
        Name   = "Block execution of potentially obfuscated scripts"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "3b576869-a4ec-4529-8536-b80a7769e899"
        Name   = "Block Office applications from creating executable content"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "26190899-1602-49e8-8b27-eb1d0a1ce869"
        Name   = "Block Office communication application from creating child processes"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b"
        Name   = "Block Win32 API calls from Office macros"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "7674ba52-37eb-4a4f-a9a1-f0f9a1619a2c"
        Name   = "Block Adobe Reader from creating child processes"
        Action = 1
    },
    [PSCustomObject]@{
        Id     = "75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84"
        Name   = "Block Office applications from injecting code into other processes"
        Action = 1
    }
)
#endregion
    
#region Functions
function Get-AttackSurfaceReductionState {
    <#
        .SYNOPSIS
        This function will get the current state of the attack surface reduction rules and return an array of objects mapping attack
        surface ids to their state.
        .EXAMPLE
        PS> Get-AttackSurfaceReductionState | Select-Object -Property Id, Action
        #>

    $currentAsrRules = @{}
    
    $asrIds = (Get-MpPreference | Select-Object -Property AttackSurfaceReductionRules_*).AttackSurfaceReductionRules_Ids
    $asrActions = (Get-MpPreference | Select-Object -Property AttackSurfaceReductionRules_*).AttackSurfaceReductionRules_Actions
    $asrCount = $asrIds.Length

    for ($i = 0; $i -lt $asrCount; $i++) {
        $key = $asrIds[$i]
        $value = $asrActions[$i]
        $currentAsrRules.Add($key, $value)
    }    

    return $currentAsrRules
}
#endregion

#region Process
try {
    Write-Host -Object "Detecting controlled folder access setting" -ForegroundColor Green
    $currentCFAState = (Get-MpPreference).EnableControlledFolderAccess

    if ($currentCFAState -eq 0) {
        $currentCFAState = "Disabled"
    } elseif ($currentCFAState -eq 2) {
        $currentCFAState = "Audit Mode"
    } elseif ($currentCFAState -eq 3) {
        $currentCFAState = "Block disk modification only"
    } elseif ($currentCFAState -eq 4) {
        $currentCFAState = "Audit disk modification only"
    }

    if ($currentCFAState -eq 1) {
        Write-Host -Object "Controlled folder access is in the desired state: Enabled (Block)" -ForegroundColor Green
    } else {
        Write-Host -Object "Controlled folder access is not in the desired state. Current State: $currentCFAState, setting to Enabled (Block)" -ForegroundColor Red
        Set-MpPreference -EnableControlledFolderAccess Enabled
    }

    Write-Host -Object "Detecting ASR rules" -ForegroundColor Green

    $currentAsrState = Get-AttackSurfaceReductionState

    foreach ($rule in $asrRules) {
        if ($currentAsrState[$rule.Id] -eq $rule.Action) {
            Write-Host -Object "Rule '$($rule.Name)' is already in the desired state" -ForegroundColor Green
        }
        else {
            Write-Host -Object "Rule '$($rule.Name)' is not in the desired state. Setting rule action to '$($rule.Action)'" -ForegroundColor Yellow
        }
    }
    Set-MpPreference -AttackSurfaceReductionRules_Ids $asrRules.Id -AttackSurfaceReductionRules_Actions $asrRules.Action
}
catch {
    $errorOccurred = $_.Exception.Message
}
finally {
    if ($errorOccurred) {
        Write-Warning -Message $errorOccurred
        throw $errorOccurred
    }
    else {
        Write-Host -Object "Script completed successfully"
    }
}
#endregion